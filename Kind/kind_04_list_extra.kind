//The function must add 1 to all elements of the list and return them modified
//+1 [1,2,3,4] => [2,3,4,5]
//Use the function Nat.add
//You must Manually fill in the types and get them out of the function (for now)
//Ex:
//sumlist<Nat, B: Type>(f: Nat -> B, xs: List<Nat>): List<B> 
//sumlist<B: Type>(f: Nat -> B, xs: List<Nat>): List<B> (next step?)
// knowing that do the following functions


//sumlist<A: Type, B: Type>(f: A -> B, xs: List<A>): List<B>
//?a


//the function must put an "ok" after all elements
//["all", "list", "created"] => ["all ok", "list ok", "created ok"]
//okaylista<A: Type, B: Type>(f: A -> B, xs: List<A>): List<B>
//?b

//the function must invert all values ​​in the list
//[[1,2,3], [4,5,6]] => [[3,2,1], [6,5,4]]
//revertlist<A: Type, B: Type>(f: A -> B, xs: List<A>): List<B>
//?c